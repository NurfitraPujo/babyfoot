{
	"info": {
		"name": "Babyfoot/Mixter",
		"_postman_id": "4a5aca8f-0e6f-7661-2933-2e4666cf4c18",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Identity Domain",
			"description": "",
			"item": [
				{
					"name": "/api/identity/userIdentities/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4a56942-b040-4998-8531-217b1097bbbd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let email = pm.variables.get(\"user_email\");",
									"",
									"pm.test(\"Payload contains an id.email, url and logIn\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id.email).to.eql(email);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.logIn !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									"pm.environment.set(\"user_email_urlencoded\", encodeURIComponent(email));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"email\": \"{{user_email}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/identity/userIdentities/register",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"identity",
								"userIdentities",
								"register"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/identity/userIdentities/{user_email}/logIn",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "491e8415-efe2-4398-a1de-922c06c2013b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "89972334-76ab-436a-a392-01c265d2c0cf",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payload contains a session id and an URL\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    ",
									"    pm.environment.set(\"session_id\", jsonData.id.id);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/identity/userIdentities/{{user_email_urlencoded}}/logIn",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"identity",
								"userIdentities",
								"{{user_email_urlencoded}}",
								"logIn"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/api/identity/sessions/{session_id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "491e8415-efe2-4398-a1de-922c06c2013b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8970759-2496-4674-a63a-4e041984fe88",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains a session id and an URL\", function () {",
									"    var text = pm.response.text();",
									"    pm.expect(text).to.eql(\"User disconnected\");",
									"",
									"    pm.environment.set(\"session_id\", undefined);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/identity/sessions/{{session_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"identity",
								"sessions",
								"{{session_id}}"
							]
						},
						"description": "Log Out"
					},
					"response": []
				}
			]
		},
		{
			"name": "Player Domain",
			"description": "",
			"item": [
				{
					"name": "/api/players",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e157b72-390d-44f9-8aa0-7606cec7ae7b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payload contains an id, email, firstName, lastName, avatar, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect('playerId', jsonData.playerId).to.not.be.undefined;",
									"    pm.environment.set(\"player_id\", pm.response.json().playerId.id);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.displayName !== undefined).to.eql(true);",
									"    pm.expect(jsonData.email !== undefined).to.eql(true);",
									"    pm.expect(jsonData.avatar !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"});",
									"",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": \"Bob Sponge\",\n\t\"email\": \"sponge.bob@sea.com\",\n\t\"avatar\": \"https://randomuser.me/api/portraits/men/11.jpg\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b700a1-595a-409c-b2b3-28338ef90956",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var playerId = pm.environment.get('player_id');",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Payload contains an id.\", function () {",
									"    pm.expect(jsonData.playerId).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.equal(playerId);",
									"})",
									"",
									"pm.test(\"Payload contains isDeleted = false.\", function () {",
									"    pm.expect(jsonData.isDeleted).to.not.be.undefined;",
									"    pm.expect(jsonData.isDeleted).to.be.false;",
									"})",
									"",
									"pm.test(\"Payload contains an avatar.\", function () {",
									"    pm.expect(jsonData.avatar).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains a displayName.\", function () {",
									"    pm.expect(jsonData.displayName).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an email.\", function () {",
									"    pm.expect(jsonData.email).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an url.\", function () {",
									"    pm.expect(jsonData.url).to.not.be.undefined;",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players/{{player_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players",
								"{{player_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players (second player)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81da6c12-b147-49da-ac25-386108107acc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payload contains an id, email, firstName, lastName, avatar, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect('playerId', jsonData.playerId).to.not.be.undefined;",
									"    pm.environment.set(\"player_id\", pm.response.json().playerId.id);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.displayName !== undefined).to.eql(true);",
									"    pm.expect(jsonData.email !== undefined).to.eql(true);",
									"    pm.expect(jsonData.avatar !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"});",
									"",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": \"Felipa De La Cruz\",\n\t\"email\": \"felipa.delacruz@earth.com\",\n\t\"avatar\": \"https://randomuser.me/api/portraits/women/81.jpg\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb75c044-4e97-44bc-be6a-8f7fe08d9926",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var playerId = pm.environment.get('player_id');",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Payload contains an id.\", function () {",
									"    pm.expect(jsonData.playerId).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.equal(playerId);",
									"})",
									"",
									"pm.test(\"Payload contains isDeleted = false.\", function () {",
									"    pm.expect(jsonData.isDeleted).to.not.be.undefined;",
									"    pm.expect(jsonData.isDeleted).to.be.false;",
									"})",
									"",
									"pm.test(\"Payload contains an avatar.\", function () {",
									"    pm.expect(jsonData.avatar).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains a displayName.\", function () {",
									"    pm.expect(jsonData.displayName).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an email.\", function () {",
									"    pm.expect(jsonData.email).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an url.\", function () {",
									"    pm.expect(jsonData.url).to.not.be.undefined;",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players/{{player_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players",
								"{{player_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a74fc26b-fe6d-4ce9-8af7-aaa5c85fd162",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an url and a list of players\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.list !== undefined).to.eql(true);",
									"",
									"    pm.environment.set(\"player1_id\", jsonData.list[0].playerId.id);",
									"    pm.environment.set(\"player2_id\", jsonData.list[1].playerId.id);pm.environment.set(\"player1_id\", jsonData.list[0].playerId.id);",
									"pm.environment.set(\"player2_id\", jsonData.list[1].playerId.id);",
									"",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40dff3e7-026e-47a8-a77e-3d6e2a347e6d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.playerId).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.not.be.undefined;",
									"    pm.expect(jsonData.isDeleted).to.not.be.undefined;",
									"    pm.expect(jsonData.avatar).to.not.be.undefined;",
									"    pm.expect(jsonData.displayName).to.not.be.undefined;",
									"    pm.expect(jsonData.email).to.not.be.undefined;",
									"    pm.expect(jsonData.url).to.not.be.undefined;",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": \"bobby SONGE\",\n\t\"email\": \"songe.bobby@sea.com\",\n\t\"avatar\": \"https://randomuser.me/api/portraits/men/91.jpg\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players/{{player_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players",
								"{{player_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/{id} (after update)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d023d791-23ec-4a42-8c90-2ff5cc3377d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var playerId = pm.environment.get('player_id');",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Payload contains an id.\", function () {",
									"    pm.expect(jsonData.playerId).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.equal(playerId);",
									"})",
									"",
									"pm.test(\"Payload contains isDeleted = false.\", function () {",
									"    pm.expect(jsonData.isDeleted).to.not.be.undefined;",
									"    pm.expect(jsonData.isDeleted).to.be.false;",
									"})",
									"",
									"pm.test(\"Payload contains an avatar.\", function () {",
									"    pm.expect(jsonData.avatar).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains a displayName.\", function () {",
									"    pm.expect(jsonData.displayName).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an email.\", function () {",
									"    pm.expect(jsonData.email).to.not.be.undefined;",
									"})",
									"",
									"pm.test(\"Payload contains an url.\", function () {",
									"    pm.expect(jsonData.url).to.not.be.undefined;",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6993cd44-6729-4b8f-b86e-ebf4ffa8bdff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players/{{player_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players",
								"{{player_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players (third player to be deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bac08330-05c9-4c85-8f59-b1847e726aac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payload contains an id, email, firstName, lastName, avatar, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect('playerId', jsonData.playerId).to.not.be.undefined;",
									"    pm.environment.set(\"player_id\", pm.response.json().playerId.id);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.displayName !== undefined).to.eql(true);",
									"    pm.expect(jsonData.email !== undefined).to.eql(true);",
									"    pm.expect(jsonData.avatar !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"});",
									"",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": \"Thord Will\",\n\t\"email\": \"will.thord@email.com\",\n\t\"avatar\": \"https://randomuser.me/api/portraits/men/31.jpg\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/players/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9900e0c-3daa-43ff-8058-6c072c7e6487",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.playerId).to.not.be.undefined;",
									"    pm.expect(jsonData.playerId.id).to.not.be.undefined;",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/players/{{player_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"players",
								"{{player_id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Game Domain",
			"description": "",
			"item": [
				{
					"name": "/api/games",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84301de5-5acf-4c79-8edc-d856fcf913d1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Payload contains an id.email, url and logIn\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.environment.set(\"game_id\", pm.response.json().gameId.id);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.start !== undefined).to.eql(true);",
									"    pm.expect(jsonData.end !== undefined).to.eql(true);",
									"});",
									"",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df034d0-bb8f-4bd3-a013-312453f3eb9e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9aab93cc-96a7-40ec-8f51-497917af49f4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id.email, url and logIn\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.environment.set(\"game_id\", pm.response.json().gameId.id);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.start !== undefined).to.eql(true);",
									"    pm.expect(jsonData.end !== undefined).to.eql(true);",
									"});",
									"",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"initialDatetime\": \"2018-03-03T14:52:11.989Z\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80fe226-c6af-4053-a4c8-930d06cbcd8b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"});",
									"",
									"pm.test(\"Payload contains the updated initialDatetime field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.initialDatetime).to.eql(\"2018-03-03T14:52:11.989Z\");",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}"
							]
						},
						"description": "checks if preivous update is ok"
					},
					"response": []
				},
				{
					"name": "/api/games/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b194358-724e-44b8-bd74-b513766af1a0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an url and a list of games\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.list !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/start",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9845b270-73c0-4496-92a2-9058be31505d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url and end url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.time !== undefined).to.eql(true);",
									"    pm.expect(jsonData.end !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/start",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"start"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/players/{player}/red",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05956386-90e7-493c-8dfd-269e785c7973",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.team !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/players/{{player1_id}}/red",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"players",
								"{{player1_id}}",
								"red"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id} + embedded player infos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df034d0-bb8f-4bd3-a013-312453f3eb9e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/players/{player}/blue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "173d5072-df55-4d39-83e5-3e5392567758",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.team !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/players/{{player2_id}}/blue",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"players",
								"{{player2_id}}",
								"blue"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/players",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e713fc2-956a-4e7e-abf8-87faac7512b6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/players",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"players"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/players/{player}/position/{position}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe1a08fe-eb9c-42ef-bc8e-88a2fac08e0d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.player !== undefined).to.eql(true);",
									"    pm.expect(jsonData.position !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/players/{{player1_id}}/position/{{position}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"players",
								"{{player1_id}}",
								"position",
								"{{position}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/goals/{player}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ec67e2d-cecb-4702-872f-47d8947f7a37",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.playerId.id !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/goals/{{player1_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"goals",
								"{{player1_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11c7dfde-3c42-41d6-a93d-14f1ae1668b6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.time !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/end",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"end"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}/players/{player}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4c8d2ed-8be0-4615-9ff2-890d772d4ede",
								"type": "text/javascript",
								"exec": [
									"/*",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, time, url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"    pm.expect(jsonData.url !== undefined).to.eql(true);",
									"    pm.expect(jsonData.player !== undefined).to.eql(true);",
									"});",
									"*/",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Payload contains an error and errorName\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error !== undefined).to.eql(true);",
									"    pm.expect(jsonData.errorName !== undefined).to.eql(true);",
									"    pm.expect(jsonData.errorName === \"GameAlreadyEndedError\").to.eql(true);",
									"    pm.expect(jsonData.error.gameId.id === pm.environment.get('game_id')).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}/players/{{player1_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}",
								"players",
								"{{player1_id}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "/api/games/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4df034d0-bb8f-4bd3-a013-312453f3eb9e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Payload contains an id, etc.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gameId !== undefined).to.eql(true);",
									"    pm.expect(jsonData.gameId.id !== undefined).to.eql(true);",
									"});",
									"",
									"const maxExpectedResponseTime = +pm.environment.get(\"max_expected_response_time__ms\");",
									"pm.test(\"Response time is less than \"+maxExpectedResponseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(maxExpectedResponseTime);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/games/{{game_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"games",
								"{{game_id}}"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		}
	]
}